"use server";

import { ActionResponse } from "@/types";
import { handleServerActionError } from "@/utils/handleServerActionError";
import { InvestissementCreateDTO, InvestissementUpdateDTO } from "../schemas/investissement.schema";
import { IInvestissement, IInvestissementParams } from "../types/revenus.types";
import { investissementAPI } from "../apis/investissement.api";

// Action pour r√©cup√©rer TOUS les investissements (sans filtrage)
export const obtenirTousInvestissementsAction = async (params?: IInvestissementParams): Promise<ActionResponse<IInvestissement[]>> => {
    try {
        console.log('üîç Action: R√©cup√©ration de tous les investissements', { params });
        
        // Si params est vide ou non d√©fini, on r√©cup√®re tout
        // Si params contient des filtres, on les envoie √† l'API (pour compatibilit√©)
        const response = await investissementAPI.obtenirTousInvestissements(params || {});
        
        console.log('‚úÖ Action: Donn√©es re√ßues', { count: response?.length });
        
        return {
            success: true,
            data: response,
            message: "Investissements obtenus avec succ√®s",
        }
    } catch (error) {
        console.error('‚ùå Action: Erreur', error);
        return handleServerActionError(error, "Erreur lors de la r√©cup√©ration des investissements");
    }
}

// Action pour r√©cup√©rer avec filtrage serveur (optionnel)
export const obtenirInvestissementsFiltresAction = async (params: IInvestissementParams): Promise<ActionResponse<IInvestissement[]>> => {
    try {
        console.log('üîç Action: R√©cup√©ration avec filtres serveur', { params });
        
        const response = await investissementAPI.obtenirTousInvestissements(params);
        
        return {
            success: true,
            data: response,
            message: "Investissements filtr√©s obtenus avec succ√®s",
        }
    } catch (error) {
        return handleServerActionError(error, "Erreur lors de la r√©cup√©ration des investissements filtr√©s");
    }
}

export const obtenirInvestissementAction = async (id: string): Promise<ActionResponse<IInvestissement>> => {
    try {
        const response = await investissementAPI.obtenirInvestissement(id);
        return {
            success: true,
            data: response,
            message: "Investissement obtenu avec succ√®s",
        }
    } catch (error) {
        return handleServerActionError(error, "Erreur lors de la r√©cup√©ration de l'investissement");
    }
}

export const ajouterInvestissementAction = async (data: InvestissementCreateDTO): Promise<ActionResponse<IInvestissement>> => {
    try {
        const response = await investissementAPI.ajouterInvestissement(data);
        return {
            success: true,
            data: response,
            message: "Investissement ajout√© avec succ√®s",
        }
    } catch (error) {
        return handleServerActionError(error, "Erreur lors de l'ajout de l'investissement");
    }
}

export const modifierInvestissementAction = async (id: string, data: InvestissementUpdateDTO): Promise<ActionResponse<IInvestissement>> => {
    try {
        const response = await investissementAPI.modifierInvestissement(id, data);
        return {
            success: true,
            data: response,
            message: "Investissement modifi√© avec succ√®s",
        }
    } catch (error) {
        return handleServerActionError(error, "Erreur lors de la modification de l'investissement");
    }
}

export const supprimerInvestissementAction = async (id: string): Promise<ActionResponse<IInvestissement>> => {
    try {
        const data = await investissementAPI.supprimerInvestissement(id);
        return {
            success: true,
            data: data,
            message: "Investissement supprim√© avec succ√®s",
        }
    } catch (error) {
        return handleServerActionError(error, "Erreur lors de la suppression de l'investissement");
    }
}